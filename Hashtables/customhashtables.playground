/* This file is written by 
	Vaghula krishnan S
	Dt on 28/9/2016
*/
// This is simple program to demonstrate Custom HashTable With chaining (Linked List)
import UIKit

class HashNode {
	var firstname: String!
	var lastname: String!
	var next: HashNode!
}

class HashTable {
	private var buckets: Array<HashNode?> //initialize the buckets with nil values
	init(capacity: Int) {
		self.buckets = Array<HashNode!>(repeating:nil, count: capacity)
	}
	
	func createHash(fullname: String) -> Int! {
		var remainder: Int = 0
		var divisor: Int = 0 //obtain the ascii value of each character
		for key in fullname.unicodeScalars {
			divisor += Int(key.value)
		}
		remainder = divisor % buckets.count
		return remainder
	}
	func addWord(firstname: String, lastname: String)
	{
		var hashindex: Int!
		var fullname: String! //create a hashvalue using the complete name
		fullname = firstname + lastname
		hashindex = self.createHash(fullname: fullname)
		let childToUse: HashNode = HashNode()
		var head: HashNode!
		childToUse.firstname = firstname
		childToUse.lastname = lastname //check for an existing bucket
		if (buckets[hashindex] == nil) {
			buckets[hashindex] = childToUse
		}
		else {
			print("a collision occured. implementing chaining..")
			head = buckets[hashindex] //append new item to the head of the list 
			childToUse.next = head
			head = childToUse //update the chained list 
			buckets[hashindex] = head
			}
	
	}
}

let val = HashTable2(capacity: 10)
val.addWord(firstname: "John", lastname: "Doe")
val.addWord(firstname: "John", lastname: "krish")
val.addWord(firstname: "test", lastname: "value")

